---
apiVersion: v1
kind: Namespace
metadata:
  name: jenkins
# This creates a dedicated namespace called "jenkins" to isolate Jenkins resources from other applications in the cluster

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jenkins-pvc
  namespace: jenkins
spec:
  accessModes:
  - ReadWriteOnce    # This means the volume can be mounted as read-write by a single node
  resources:
    requests:
      storage: 10Gi  # Requesting 10 gigabytes of persistent storage for Jenkins data
# This PVC ensures Jenkins data persists even if the pod restarts

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jenkins
  namespace: jenkins
spec:
  replicas: 1  # Running only one instance of Jenkins
  selector:
    matchLabels:
      app: jenkins  # Used to identify which pods are managed by this deployment
  template:
    metadata:
      labels:
        app: jenkins  # Label applied to the pods created by this template
    spec:
      serviceAccountName: jenkins  # The service account used by the pod for permissions
      containers:
      - name: jenkins
        image: your-registry.example.com/speech-jenkins:latest    # The Docker image to use
        ports:
        - containerPort: 8080      # Jenkins web interface port
          name: http
        - containerPort: 50000      # Jenkins agent communication port
          name: jnlp
        volumeMounts:
        - name: jenkins-home      # Mounting the persistent volume to store Jenkins data
          mountPath: /var/jenkins_home
        - name: docker-sock      # Mounting the Docker socket to allow Jenkins to use the host's Docker
          mountPath: /var/run/docker.sock
      volumes:
      - name: jenkins-home    # Definition of the persistent volume for Jenkins data
        persistentVolumeClaim:
          claimName: jenkins-pvc    # References the PVC defined above
      - name: docker-sock    # Definition of the Docker socket volume
        hostPath:
          path: /var/run/docker.sock    # Path to the Docker socket on the host
# This deployment defines how the Jenkins container should run in the cluster

---
apiVersion: v1
kind: Service
metadata:
  name: jenkins
  namespace: jenkins
spec:
  type: NodePort  # Makes the service accessible from outside the cluster via node IP and port
  ports:
  - port: 8080    # Port exposed within the cluster
    targetPort: 8080    # Port on the container to forward to
    nodePort: 30080    # External port on all nodes (accessible from outside)
    name: http
  - port: 50000
    targetPort: 50000
    name: jnlp
  selector:
    app: jenkins  # Routes traffic to pods with the label app=jenkins
# This service exposes Jenkins to users and allows agents to connect

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jenkins
  namespace: jenkins
# This creates a service account named "jenkins" that the Jenkins pod will use for authentication

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jenkins
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin  # Gives the jenkins service account full admin privileges
subjects:
- kind: ServiceAccount
  name: jenkins
  namespace: jenkins
# This grants the Jenkins service account cluster-admin permissions, allowing it to manage resources across the cluster
